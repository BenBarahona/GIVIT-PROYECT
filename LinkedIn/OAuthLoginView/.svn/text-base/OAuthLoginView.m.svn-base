//
//  iPhone OAuth Starter Kit
//
//  Supported providers: LinkedIn (OAuth 1.0a)
//
//  Lee Whitney
//  http://whitneyland.com
//
#import <Foundation/NSNotificationQueue.h>
#import "OAuthLoginView.h"
#import "AppDelegate.h"
#import "XMLParser.h"
#import "JSON.h"
#import "Portfolio.h"
#import "HomeLocationView.h"
/**/

//
// OAuth steps for version 1.0a:
//
//  1. Request a "request token"
//  2. Show the user a browser with the LinkedIn login page
//  3. LinkedIn redirects the browser to our callback URL
//  4  Request an "access token"
//
@implementation OAuthLoginView

@synthesize requestToken, accessToken, profile, inviteLinkedInFriend;
@synthesize BG_Img,WhiteLogInBGImg,logInView,OAuthView,smileyView,lbl_messageAfterLogin,playyIt_Btn;
@synthesize isFromSearchDetailsForBookMark;
@synthesize arr_HomeLocation,selectedHomeLocationIndex;
AppDelegate *appDelegate;

CustomAlertView *_CustomAlertView_Login;

@synthesize MessageSubject;

//
// OAuth step 1a:
//
// The first step in the the OAuth process to make a request for a "request token".
// Yes it's confusing that the work request is mentioned twice like that, but it is whats happening.
//
- (void)requestTokenFromProvider
{
    [activityIndicator startAnimating];
    OAMutableURLRequest *request =
    [[[OAMutableURLRequest alloc] initWithURL:requestTokenURL
                                     consumer:consumer
                                        token:nil
                                     callback:linkedInCallbackURL
                            signatureProvider:nil] autorelease];
    
    [request setHTTPMethod:@"POST"];
    
    OARequestParameter * scopeParameter=[OARequestParameter requestParameter:@"scope" value:@"r_fullprofile rw_nus r_network w_messages"];
    
    [request setParameters:[NSArray arrayWithObject:scopeParameter]];
    
    OADataFetcher *fetcher = [[[OADataFetcher alloc] init] autorelease];
    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(requestTokenResult:didFinish:)
                  didFailSelector:@selector(requestTokenResult:didFail:)];
}

//
// OAuth step 1b:
//
// When this method is called it means we have successfully received a request token.
// We then show a webView that sends the user to the LinkedIn login page.
// The request token is added as a parameter to the url of the login page.
// LinkedIn reads the token on their end to know which app the user is granting access to.
//
- (void)requestTokenResult:(OAServiceTicket *)ticket didFinish:(NSData *)data 
{
    if (ticket.didSucceed == NO) 
        return;
        
    NSString *responseBody = [[NSString alloc] initWithData:data
                                                   encoding:NSUTF8StringEncoding];
    self.requestToken = [[OAToken alloc] initWithHTTPResponseBody:responseBody];
    
    [self allowUserToLogin];
    [responseBody release];
    //[requestToken release];
}

- (void)requestTokenResult:(OAServiceTicket *)ticket didFail:(NSData *)error 
{
    [activityIndicator stopAnimating];
    lbl_just.frame=CGRectMake(33, 192, 255, 76);
    lbl_just.numberOfLines=3;
    lbl_just.text=@"Oops. Unable to connect to Linkedin at this time. Please try a little later";
    lbl_just.textColor=[UIColor darkGrayColor];
    lbl_just.font=[UIFont systemFontOfSize:17.0];
    [self performSelector:@selector(DISMISS_SELF_VIEW) withObject:self afterDelay:3];
}

-(void)DISMISS_SELF_VIEW {
    [self.navigationController popViewControllerAnimated:YES];
}
//
// OAuth step 2:
//
// Show the user a browser displaying the LinkedIn login page.
// They type username/password and this is how they permit us to access their data
// We use a UIWebView for this.
//
// Sending the token information is required, but in this one case OAuth requires us
// to send URL query parameters instead of putting the token in the HTTP Authorization
// header as we do in all other cases.
//
- (void)allowUserToLogin
{
    NSString *userLoginURLWithToken = [NSString stringWithFormat:@"%@?oauth_token=%@&auth_token_secret=%@", 
        userLoginURLString, self.requestToken.key, self.requestToken.secret];
    
    userLoginURL = [NSURL URLWithString:userLoginURLWithToken];
    NSURLRequest *request = [NSMutableURLRequest requestWithURL: userLoginURL];
    [webView loadRequest:request];     
}


//
// OAuth step 3:
//
// This method is called when our webView browser loads a URL, this happens 3 times:
//
//      a) Our own [webView loadRequest] message sends the user to the LinkedIn login page.
//
//      b) The user types in their username/password and presses 'OK', this will submit
//         their credentials to LinkedIn
//
//      c) LinkedIn responds to the submit request by redirecting the browser to our callback URL
//         If the user approves they also add two parameters to the callback URL: oauth_token and oauth_verifier.
//         If the user does not allow access the parameter user_refused is returned.
//
//      Example URLs for these three load events:
//          a) https://www.linkedin.com/uas/oauth/authorize?oauth_token=<token value>
//
//          b) https://www.linkedin.com/uas/oauth/authorize/submit   OR
//             https://www.linkedin.com/uas/oauth/authenticate?oauth_token=<token value>&trk=uas-continue
//
//          c) hdlinked://linkedin/oauth?oauth_token=<token value>&oauth_verifier=63600     OR
//             hdlinked://linkedin/oauth?user_refused
//             
//
//  We only need to handle case (c) to extract the oauth_verifier value
//
- (BOOL)webView:(UIWebView*)webView shouldStartLoadWithRequest:(NSURLRequest*)request navigationType:(UIWebViewNavigationType)navigationType 
{
	NSURL *url = request.URL;
	NSString *urlString = url.absoluteString;
    
    addressBar.text = urlString;
   // [activityIndicator startAnimating];
    
    BOOL requestForCallbackURL = ([urlString rangeOfString:linkedInCallbackURL].location != NSNotFound);
    if ( requestForCallbackURL )
    {
        BOOL userAllowedAccess = ([urlString rangeOfString:@"user_refused"].location == NSNotFound);
        if ( userAllowedAccess )
        {            
            [self.requestToken setVerifierWithUrl:url];
            [self accessTokenFromProvider];
        }
        else
        {
            // User refused to allow our app access
            // Notify parent and close this view
            logInView.hidden=NO;
            OAuthView.hidden=YES;
//            [[NSNotificationCenter defaultCenter] 
//                    postNotificationName:@"loginViewDidFinish"
//                                  object:self 
//                                userInfo:nil];

//            [self dismissViewControllerAnimated:YES completion:nil];
        }
    }
    else
    {
        // Case (a) or (b), so ignore it
    }
    lbl_just.hidden=YES;
    //[activityIndicator stopAnimating];
	return YES;
}

- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    [activityIndicator stopAnimating];
}

//
// OAuth step 4:
//
- (void)accessTokenFromProvider
{ 
    OAMutableURLRequest *request = 
            [[[OAMutableURLRequest alloc] initWithURL:accessTokenURL
                                             consumer:consumer
                                                token:self.requestToken   
                                             callback:nil
                                    signatureProvider:nil] autorelease];
    
    [request setHTTPMethod:@"POST"];
    OADataFetcher *fetcher = [[[OADataFetcher alloc] init] autorelease];
    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(accessTokenResult:didFinish:)
                  didFailSelector:@selector(accessTokenResult:didFail:)];    
}

- (void)accessTokenResult:(OAServiceTicket *)ticket didFinish:(NSData *)data 
{
    NSString *responseBody = [[NSString alloc] initWithData:data
                                                   encoding:NSUTF8StringEncoding];
    
    BOOL problem = ([responseBody rangeOfString:@"oauth_problem"].location != NSNotFound);
    if ( problem )
    {
        ;
    }
    else
    {
        self.accessToken = [[OAToken alloc] initWithHTTPResponseBody:responseBody];
        [[NSUserDefaults standardUserDefaults] setObject:responseBody forKey:@"LnAccessToken"];
        [self testApiCall];
    }
    [responseBody release];
   // [accessToken release];
}

#pragma mark-
#pragma mark User Details API

- (void)testApiCall
{
    NSURL *url = [NSURL URLWithString:@"http://api.linkedin.com/v1/people/~:(id,first-name,last-name,headline,picture-url)"];
    OAMutableURLRequest *request = 
            [[OAMutableURLRequest alloc] initWithURL:url
                                            consumer:consumer
                                               token:self.accessToken
                                            callback:nil
                                    signatureProvider:nil];
    
    [request setValue:@"json" forHTTPHeaderField:@"x-li-format"];

    OADataFetcher *fetcher = [[OADataFetcher alloc] init];
    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(testApiCallResult:didFinish:)
                  didFailSelector:@selector(testApiCallResult:didFail:)];    
    [request release];
}
//Get all details
- (void)testApiCallResult:(OAServiceTicket *)ticket didFinish:(NSData *)data 
{
    NSString *responseBody = [[NSString alloc] initWithData:data
                                                   encoding:NSUTF8StringEncoding];
    
    self.profile = [responseBody objectFromJSONString];
    [responseBody release];
    
    // Notify parent and close this view
    [[NSNotificationCenter defaultCenter] 
            postNotificationName:@"loginViewDidFinish"        
                          object:self
                        userInfo:self.profile];

//    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)testApiCallResult:(OAServiceTicket *)ticket didFail:(NSData *)error 
{
    ;
}


#pragma mark -
#pragma mark Connection API

- (void)testApiCallForConnection
{
    NSString *_apikey = @"ok0ktu3pdj67";//@"2uyyj047cluu";
    NSString *_secretkey = @"GgEcT0AGuP7N75di";//@"8G9SUCCdcC01pSvQ";
    NSString *LnAccessToken = [[NSUserDefaults standardUserDefaults] objectForKey:@"LnAccessToken"];
    
    OAConsumer *_consumer = [[OAConsumer alloc] initWithKey:_apikey
                                                     secret:_secretkey
                                                      realm:@"https://api.linkedin.com/"];
    
    OAToken *_token = [[OAToken alloc] initWithHTTPResponseBody:LnAccessToken];

    //https://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry,headline,email-address,picture-url,public-profile-url)
    
    NSURL *url = [NSURL URLWithString:@"https://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry,headline,email-address,picture-url,public-profile-url,formatted-name,location:(name),positions)"];
   
    
    OAMutableURLRequest *request =
    [[OAMutableURLRequest alloc] initWithURL:url
                                    consumer:_consumer
                                       token:_token
                                    callback:nil
                           signatureProvider:nil];
    
    [request setValue:@"json" forHTTPHeaderField:@"x-li-format"];
    
    OADataFetcher *fetcher = [[OADataFetcher alloc] init];
    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(testApiCallForConnectionResult:didFinish:)
                  didFailSelector:@selector(testApiCallForConnectionResult:didFail:)];
    [request release];
   // [_consumer release];
   // [_token release];
}
//Get all details
- (void)testApiCallForConnectionResult:(OAServiceTicket *)ticket didFinish:(NSData *)data
{
    NSString *responseBody = [[NSString alloc] initWithData:data
                                                   encoding:NSUTF8StringEncoding];
    
    self.profile = [responseBody objectFromJSONString];
    
    // Notify parent and close this view
    [[NSNotificationCenter defaultCenter]
     postNotificationName:@"connectionDidFinish"
     object:self
     userInfo:self.profile];
    [responseBody release];
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)testApiCallForConnectionResult:(OAServiceTicket *)ticket didFail:(NSData *)error
{
    ;
}

#pragma mark- 
#pragma mark Linkedin Message Post

- (void)PostLinkedInMessage:(NSString *)textMessage FriendID:(NSString *)_friendId
{
    NSString *_apikey = @"ok0ktu3pdj67";//@"2uyyj047cluu";
    NSString *_secretkey = @"GgEcT0AGuP7N75di";//@"8G9SUCCdcC01pSvQ";
    NSString *LnAccessToken = [[NSUserDefaults standardUserDefaults] objectForKey:@"LnAccessToken"];
    
    OAConsumer *_consumer = [[OAConsumer alloc] initWithKey:_apikey
                                                     secret:_secretkey
                                                      realm:@"https://api.linkedin.com/"];
    
    OAToken *_token = [[OAToken alloc] initWithHTTPResponseBody:LnAccessToken];
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"http://api.linkedin.com/v1/people/~/mailbox"]];
    
    
    OAMutableURLRequest *request =
    [[OAMutableURLRequest alloc] initWithURL:url
                                    consumer:_consumer
                                       token:_token
                                    callback:nil
                           signatureProvider:nil];
    
    
    //NSString *msgString = [NSString stringWithFormat:@"{\"recipients\": {\"values\": [{\"person\": {\"_path\": \"/people/%@\"}}]},\"subject\": \"From PlayyIt.\",\"body\": \"%@\"}",_friendId,textMessage];
    
    
    NSString *msgString = [NSString stringWithFormat:@"{\"recipients\": {\"values\": [{\"person\": {\"_path\": \"/people/%@\"}}]},\"subject\": \"%@\",\"body\": \"%@\"}",_friendId,self.MessageSubject,textMessage];
    
    [request setValue:@"json" forHTTPHeaderField:@"x-li-format"];
    
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-type"];
    
    [request setHTTPMethod:@"POST"];
    
    [request setHTTPBodyWithString:msgString];
    
    OADataFetcher *fetcher = [[OADataFetcher alloc] init];
    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(PostLinkedInMessage:didFinish:)
                  didFailSelector:@selector(PostLinkedInMessage:didFail:)];
    
    [request release];
    //[_token release];
    //[_consumer release];
}


- (void)PostLinkedInMessage:(OAServiceTicket *)ticket didFinish:(NSData *)data
{
    NSString *responseBody = [[NSString alloc] initWithData:data
                                                   encoding:NSUTF8StringEncoding];
    
    
        self.profile = [responseBody objectFromJSONString];
        [responseBody release];
        
        if (self.inviteLinkedInFriend) {
            [self.inviteLinkedInFriend inviteAndSendMessage];
        }
        
    
}

- (void)PostLinkedInMessage:(OAServiceTicket *)ticket didFail:(NSData *)error
{
    NSString *jsonResponse = [[NSString alloc] initWithData:error
                                                   encoding:NSUTF8StringEncoding];
    //NSLog(@"LinkedIn JSON STRING ====== %@",jsonResponse);
    
    //NSLog(@"%@",[error description]);
    [jsonResponse release];
    
    UIAlertView *vwAlert=[[UIAlertView alloc]initWithTitle:@"Postorio" message:@"Failed to Send Message." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
    [vwAlert show];
    [vwAlert release];
}

- (void)initLinkedInApi
{
    apikey = @"ok0ktu3pdj67";//@"2uyyj047cluu";
    secretkey = @"GgEcT0AGuP7N75di";//@"8G9SUCCdcC01pSvQ";

    consumer = [[OAConsumer alloc] initWithKey:apikey
                                        secret:secretkey
                                         realm:@"http://api.linkedin.com/"];

    requestTokenURLString = @"https://api.linkedin.com/uas/oauth/requestToken";
    accessTokenURLString = @"https://api.linkedin.com/uas/oauth/accessToken";
    userLoginURLString = @"https://www.linkedin.com/uas/oauth/authorize";    
    linkedInCallbackURL = @"hdlinked://linkedin/oauth";
    
    requestTokenURL = [[NSURL URLWithString:requestTokenURLString] retain];
    accessTokenURL = [[NSURL URLWithString:accessTokenURLString] retain];
    userLoginURL = [[NSURL URLWithString:userLoginURLString] retain];
}

-(void)LogoutFromLinkedIn
{
    @try {
        
        self.requestToken = nil;
        NSHTTPCookie *cookie;
        NSHTTPCookieStorage *storage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
        for (cookie in [storage cookies])
        {
            NSString* domainName = [cookie domain];
            NSRange domainRange = [domainName rangeOfString:@"linkedin"];
            if(domainRange.length > 0)
            {
                [storage deleteCookie:cookie];
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"Exception: %@",exception);
    }
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
//    self.selectedHomeLocationIndex=0;
    logInView.hidden=NO;
    OAuthView.hidden=YES;
    screenBounds=[[UIScreen mainScreen]bounds];
    if ([Common get_iPhone5ScreenSize:&(screenBounds)])
    {
        [BG_Img setImage:[UIImage imageNamed:@"MainMenuBg-568h@2x.png"]];
        [WhiteLogInBGImg setImage:[UIImage imageNamed:@"MainMenuBgWhite-568h@2x.png"]];
    }
    appDelegate=(AppDelegate *)[[UIApplication sharedApplication] delegate];
//    self.arr_HomeLocation=[NSMutableArray array];
//    [arr_HomeLocation addObject:@"A"]; 
//    [arr_HomeLocation addObject:@"B"];
//    [arr_HomeLocation addObject:@"C"];
//    NSLog(@"%@",self.arr_HomeLocation);
}
-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:YES];
//    NSString *_isLogin=[[NSUserDefaults standardUserDefaults] valueForKey:@"loginDone"];
//    if ([_isLogin isEqualToString:@"1"]) {
//        //[self dismissViewControllerAnimated:NO completion:nil];
//        lbl_message.text=@"Simply sign in with your Linkedin account. You will be able to bookmark your activity of choice, and invite your LinkedIn contacts to your bookmarks.";//21
//        login_Btn.userInteractionEnabled=NO;
//        //login_Btn.enabled = NO;
//        [self.navigationController popViewControllerAnimated:YES];
//    }
}

- (void)viewDidAppear:(BOOL)animated
{
   /* if ([apikey length] < 64 || [secretkey length] < 64)
    {
        UIAlertView *alert = [[UIAlertView alloc]
                          initWithTitle: @"OAuth Starter Kit"
                          message: @"You must add your apikey and secretkey.  See the project file readme.txt"
                          delegate: nil
                          cancelButtonTitle:@"OK"
                          otherButtonTitles:nil];
        [alert show];
        [alert release];
        
        // Notify parent and close this view
        [[NSNotificationCenter defaultCenter] 
         postNotificationName:@"loginViewDidFinish"        
         object:self
         userInfo:self.profile];
        
        [self dismissModalViewControllerAnimated:YES];
    }
*/

}
    
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

-(IBAction)CLICK_LOGIN:(id)sender
{
//    oAuthLoginView = [[OAuthLoginView alloc] initWithNibName:nil bundle:nil];
//    [oAuthLoginView retain];
    
    // register to be told when the login is finished
    [self LogoutFromLinkedIn];
    [self initLinkedInApi];
    [addressBar setContentVerticalAlignment:UIControlContentVerticalAlignmentCenter];
    
    [self requestTokenFromProvider];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(loginViewDidFinish:)
                                                 name:@"loginViewDidFinish"
                                               object:self];
    logInView.hidden=YES;
    OAuthView.hidden=NO;
}

#pragma mark-

-(void) loginViewDidFinish:(NSNotification*)notification
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	
	NSDictionary *profile = [notification userInfo];
    
    appDelegate.objLogin.linkedinUserId=[[profile valueForKey:@"id"] retain];
    
    appDelegate.objLogin.userName=[NSString stringWithFormat:@"%@ %@",[profile valueForKey:@"firstName"],[profile valueForKey:@"lastName"]]; 
    
    //NSLog(@"linkedinUserId=%@",appDelegate.objLogin.linkedinUserId);
    //NSLog(@"linkedin User Name=%@",appDelegate.objLogin.userName);
    _homeLocationView.hidden=NO;
    if ([Common get_iPhone5ScreenSize:&(screenBounds)])
    {
        [_homeLocationBGImgView setImage:[UIImage imageNamed:@"MainMenuBg-568h@2x.png"]];
        [_homeLocationWhiteBGImgView setImage:[UIImage imageNamed:@"MainMenuBgWhite-568h@2x.png"]];
    }
    OAuthView.hidden=YES;
}

-(void)DismissCustomAlertview{
    [_CustomAlertView_Login removeFromSuperview];
    _CustomAlertView_Login._DismissCustomAlertViewDelegate = nil;
}

#pragma mark -
#pragma mark Cross Button Click
-(IBAction)CLICK_CROSS:(id)sender
{
    [self.navigationController popViewControllerAnimated:YES];
}

#pragma mark -
#pragma mark PlayyIt Button Click
-(IBAction)CLICK_PlayyIt:(id)sender
{
    Portfolio *_Portfolio =[[Portfolio alloc] initWithNibName:@"Portfolio" bundle:[NSBundle mainBundle]];
    _Portfolio.isComeFromLogin=YES;
    [self.navigationController pushViewController:_Portfolio animated:NO];
    [_Portfolio release];
}



- (void)viewDidUnload {
    [self setWhiteLogInBGImg:nil];
    [self setBG_Img:nil];
    [self setHomeLocationView:nil];
    [self setHomeLocationBGImgView:nil];
    [self setHomeLocationWhiteBGImgView:nil];
    [self setBtnHomeLocation:nil];
    [super viewDidUnload];
}

- (void)dealloc
{
//    [arr_HomeLocation release];
    [_homeLocationView release];
    [_homeLocationBGImgView release];
    [_homeLocationWhiteBGImgView release];
    [_btnHomeLocation release];
    [super dealloc];
    [WhiteLogInBGImg release];
    [BG_Img release];
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

#pragma mark -
#pragma mark CLICK_HomeLocation
-(IBAction)CLICK_HomeLocation:(id)sender
{
    [appDelegate.objLogin SaveToUserDefault];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(homeLocationClick)
                                                 name:@"HomeLocationClick"
                                               object:nil];
    
    HomeLocationView *obj_HomeLocationView=[[HomeLocationView alloc]initWithNibName:@"HomeLocationView" bundle:[NSBundle mainBundle]];
    obj_HomeLocationView.HaveToDoBookmark = isFromSearchDetailsForBookMark;
    [self.navigationController presentModalViewController:obj_HomeLocationView animated:YES];
    [obj_HomeLocationView release];
    if (isFromSearchDetailsForBookMark) {//Bisw_29
        //[self.navigationController popViewControllerAnimated:YES];
        //NSLog(@"test");
    }
    else{
        isFromSearchDetailsForBookMark = NO;
        OAuthView.hidden=YES;
        logInView.hidden=NO;
        login_Btn.hidden=YES;
        smileyView.hidden=NO;
        lbl_messageAfterLogin.hidden=NO;
        playyIt_Btn.hidden=NO;
        lbl_message.hidden=YES;
        lbl2_message.hidden=YES;
    }
}

-(void)homeLocationClick
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"HomeLocationClick" object:nil];
    _homeLocationView.hidden=YES;
    
    isFromSearchDetailsForBookMark = NO;
    OAuthView.hidden=YES;
    logInView.hidden=NO;
    login_Btn.hidden=YES;
    smileyView.hidden=NO;
    lbl_messageAfterLogin.hidden=NO;
    playyIt_Btn.hidden=NO;
    lbl_message.hidden=YES;
    lbl2_message.hidden=YES;
}

@end
